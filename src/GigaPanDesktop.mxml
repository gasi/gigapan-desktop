<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////

    GigaPan Desktop

    Developed by Daniel Gasienica <daniel@gasienica.ch>
    Powered by OpenZoom
    http://openzoom.org/
    License: GPL3

    All Images Copyright GigaPan.org

////////////////////////////////////////////////////////////////////////////////
-->
<mx:WindowedApplication
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="org.openzoom.gigapan.ui.*"
    layout="absolute"
    minWidth="640"
    minHeight="480"
    width="960"
    height="600"
    showFlexChrome="false"
    applicationComplete="applicationCompleteHandler(event)"
    >
    <mx:Style source="../assets/style/gigapan-desktop.css"/>
    <mx:Script>
        <![CDATA[
        	import org.openzoom.gigapan.GigaPan;
        
        	import flash.utils.setTimeout;
        
        	import com.adobe.serialization.json.JSON;
        
        	import mx.collections.ArrayCollection;
        	import mx.events.FlexEvent;
        	import mx.events.ListEvent;
        	
        	import org.openzoom.flash.descriptors.gigapan.GigaPanDescriptor;
        	import org.openzoom.flash.events.NetworkRequestEvent;
        	import org.openzoom.flash.net.INetworkQueue;
        	import org.openzoom.flash.net.INetworkRequest;
        	import org.openzoom.flash.net.NetworkQueue;


            private static const API_ENDPOINT_URI:String = "http://api.gigapan.org/beta/gigapans/" 
            private static const API_POLICY_URI:String = "http://api.gigapan.org/crossdomain.xml" 
            private static const MOST_RECENT_URI:String = API_ENDPOINT_URI + "most_recent.json"
            private static const MOST_POPULAR_URI:String = API_ENDPOINT_URI + "most_popular.json"
            private static const CURRATED_URI:String = API_ENDPOINT_URI + "currated.json"

            // Obama Inauguration            
//            private static const DEFAULT_DESCRIPTOR:GigaPanDescriptor = GigaPanDescriptor.fromID(17217, 56646, 27788)
            
            // Apollo
            private static const DEFAULT_DESCRIPTOR:GigaPanDescriptor = GigaPanDescriptor.fromID(25500, 33620, 3416)
            
            private static const UI_HIDE_DELAY:Number = 2000
            private static const SIDEBAR_HIDE_DELAY:Number = 2500
            
            private var hiddenSideBarEnabled:Boolean = false
            private var loader:INetworkQueue
            private var uiTimer:Timer
            
            private function applicationCompleteHandler(event:FlexEvent):void
            {
                initApplication()
                initViewer()
                initSideBar()
            }
            
            private function initApplication():void
            {
                Security.loadPolicyFile(API_POLICY_URI)
                
                stage.addEventListener(MouseEvent.MOUSE_MOVE,
                                       stage_mouseMoveHandler,
                                       false, 0, true)
                
                uiTimer = new Timer(UI_HIDE_DELAY, 1)
                uiTimer.addEventListener(TimerEvent.TIMER_COMPLETE,
                                         uiTimer_completeHandler,
                                         false, 0, true)
                uiTimer.start()

                setTimeout(sideBarDelayClosure, SIDEBAR_HIDE_DELAY)
            }
            
            private function sideBarDelayClosure():void
            {
                hiddenSideBarEnabled = true
            }
            
            private function initViewer():void
            {
            	viewer.image.addEventListener(Event.INIT,
            	                              image_initHandler,
            	                              false, 0, true)
            	viewer.image.addEventListener(ProgressEvent.PROGRESS,
            	                              image_progressHandler,
            	                              false, 0, true)
            	viewer.image.addEventListener(Event.COMPLETE,
            	                              image_completeHandler,
            	                              false, 0, true)
            	viewer.loadDescriptor(DEFAULT_DESCRIPTOR)
            }
            
            private function image_initHandler(event:Event):void
            {
            	imageSpinner.visible = true
            }
            
            private function image_progressHandler(event:ProgressEvent):void
            {
                imageSpinner.visible = true
            }
            
            private function image_completeHandler(event:Event):void
            {
            	imageSpinner.visible = false
            }
            
            private function initSideBar():void
            {
                loader = new NetworkQueue()
                
                var request:INetworkRequest
                request = loader.addRequest(MOST_RECENT_URI, String, MOST_RECENT_URI)
                request.addEventListener(Event.COMPLETE,
                                         request_completeHandler,
                                         false, 0, true)
                                     
                request = loader.addRequest(MOST_POPULAR_URI, String, MOST_POPULAR_URI)
                request.addEventListener(Event.COMPLETE,
                                         request_completeHandler,
                                         false, 0, true)
                                     
                request = loader.addRequest(CURRATED_URI, String, CURRATED_URI)
                request.addEventListener(Event.COMPLETE,
                                         request_completeHandler,
                                         false, 0, true)
            }
            
            private function request_completeHandler(event:NetworkRequestEvent):void
            {
            	var data:Object = JSON.decode(event.data)
            	var collection:Array = []
            	
            	for each (var item:Object in data.items)
            	{
            		var gigapan:GigaPan = new GigaPan()
            		gigapan.id = item[1].id
            		gigapan.width = item[1].width
            		gigapan.height = item[1].height
            		collection.push(gigapan)
            	}
            	
            	if (event.context == MOST_RECENT_URI)
                    sideBar.mostRecentCollection = new ArrayCollection(collection)
                    
            	if (event.context == MOST_POPULAR_URI)
                    sideBar.mostPopularCollection = new ArrayCollection(collection)
                    
            	if (event.context == CURRATED_URI)
                    sideBar.curratedCollection = new ArrayCollection(collection)
            }
            
            private function sideBar_itemSelectedHandler(event:Event):void
            {
                var gigapan:GigaPan = sideBar.selectedItem as GigaPan
                
                if (gigapan.width == 0 || gigapan.height == 0)
                {
                	viewer.loadId(gigapan.id)
                }
                else
                {
                    var descriptor:GigaPanDescriptor
                    descriptor = GigaPanDescriptor.fromID(gigapan.id, gigapan.width, gigapan.height)
	            	viewer.loadDescriptor(descriptor)
                }
            }
            
            private function uiTimer_completeHandler(event:TimerEvent):void
            {
            	hideUI()
            }
            
            private function stage_mouseMoveHandler(event:MouseEvent):void
            {
            	uiTimer.reset()
            	uiTimer.start()
            	showUI()
            	
            	if (!hiddenSideBarEnabled)
            	   return
            	   
            	if (event.stageY > stage.stageHeight - 64)
            		showSideBar()
            		
                if (sideBar.visible && event.stageY < stage.stageHeight - sideBar.height - 64)
                    hideSideBar()
            }
            
            private function showSideBar():void
            {
            	currentState = ""
            }
            
            private function hideSideBar():void
            {
            	currentState = "full"
            }
            
            private function showUI():void
            {
            	if (!logo.visible)
            	{
            	   logo.visible = true
            	   Mouse.show()
            	}
            }
            
            private function hideUI():void
            {
            	if (logo.visible)
            	{
	            	logo.visible = false
	            	Mouse.hide()
            	}
            }
       ]]>
    </mx:Script>
    
    <mx:states>
        <mx:State name="full"/>
    </mx:states>
    
    <mx:transitions>
        <mx:Transition fromState="" toState="full">
            <mx:Sequence target="{sideBar}">
                <mx:SetPropertyAction name="previousHeight" value="{sideBar.height}"/>
                <mx:Resize heightTo="0" duration="800"/>
                <mx:SetPropertyAction name="includeInLayout" value="false"/>
            </mx:Sequence>
        </mx:Transition>
        <mx:Transition fromState="full" toState="">
            <mx:Sequence target="{sideBar}">
                <mx:SetPropertyAction name="includeInLayout" value="true"/>
                <mx:Resize heightTo="{sideBar.previousHeight}" duration="600"/>
            </mx:Sequence>
        </mx:Transition>
    </mx:transitions>
    
    <mx:VDividedBox
        top="0"
        right="0"
        bottom="0"
        left="0"
        liveDragging="true"
        >
        <mx:Canvas
	        width="100%"
	        height="100%"
            backgroundColor="#000000"
	        >
		    <ui:Spinner
                horizontalCenter="0"
                verticalCenter="0"
                />
		    <ui:Viewer
		        id="viewer"
		        top="0"
		        right="0"
		        bottom="0"
		        left="0"
		        />
		    <ui:Spinner
		    	id="imageSpinner"
		        radius="4"
		        right="20"
		        top="20"
	            showEffect="Fade"
	            hideEffect="Fade"
		        />
        </mx:Canvas>
        
	    <ui:Sidebar
	    	id="sideBar"
	    	height="320"
	        maxHeight="480"
	        minHeight="320"
	    	width="100%"
	    	itemSelected="sideBar_itemSelectedHandler(event)"
	    	showEffect="Fade"
	    	hideEffect="Fade"
	    	/>
    </mx:VDividedBox>
    
    <ui:Logo
    	id="logo"
    	width="94"
    	height="32"
    	x="5"
    	showEffect="Fade"
    	hideEffect="Fade"
    	/>
    
</mx:WindowedApplication>
